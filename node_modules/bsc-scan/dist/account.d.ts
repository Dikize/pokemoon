import { QueryParams, RequestConfig } from './query';
declare type AccountQueryParams = Omit<QueryParams, 'address' | 'contractAddress' | 'txhash' | 'module' | 'action'>;
declare type BlockRange = {
    startBlock?: number;
    endBlock: number;
};
declare type AddressBalance = {
    account: string;
    balance: string;
};
declare type Transaction = {
    blockNumber: string;
    timeStamp: string;
    hash: string;
    nonce: string;
    blockHash: string;
    transactionIndex: string;
    from: string;
    to: string;
    value: string;
    gas: string;
    gasPrice: string;
    isError: string;
    txreceipt_status: string;
    input: string;
    contractAddress: string;
    cumulativeGasUsed: string;
    gasUsed: string;
    confirmations: string;
};
declare type InternalTransaction = {
    blockNumber: string;
    timeStamp: string;
    hash: string;
    from: string;
    to: string;
    value: string;
    contractAddress: string;
    input: string;
    type: string;
    gas: string;
    gasUsed: string;
    traceId: string;
    isError: string;
    errCode: string;
};
declare type TokenTransferEvent = {
    blockNumber: string;
    timeStamp: string;
    hash: string;
    nonce: string;
    blockHash: string;
    from: string;
    contractAddress: string;
    to: string;
    value: string;
    tokenName: string;
    tokenSymbol: string;
    tokenDecimal: string;
    transactionIndex: string;
    gas: string;
    gasPrice: string;
    gasUsed: string;
    cumulativeGasUsed: string;
    input: string;
    confirmations: string;
};
declare function getBnbBalance(address: string, queryOptions?: AccountQueryParams, requestConfig?: RequestConfig): Promise<string | import("axios").AxiosResponse<{
    status: "0" | "1";
    message: string;
    result: string;
}>>;
declare function getBnbBalanceForMultipleAddresses(addresses: string[], queryOptions?: AccountQueryParams, requestConfig?: RequestConfig): Promise<AddressBalance[] | import("axios").AxiosResponse<{
    status: "0" | "1";
    message: string;
    result: AddressBalance[];
}>>;
declare function getInternalTransactionsByAddress(address: string, queryOptions?: AccountQueryParams, requestConfig?: RequestConfig): Promise<InternalTransaction[] | import("axios").AxiosResponse<{
    status: "0" | "1";
    message: string;
    result: InternalTransaction[];
}>>;
declare function getInternalTransactionsByHash(txhash: string, queryOptions?: AccountQueryParams, requestConfig?: RequestConfig): Promise<InternalTransaction[] | import("axios").AxiosResponse<{
    status: "0" | "1";
    message: string;
    result: InternalTransaction[];
}>>;
declare function getInternalTransactionsByBlockRange(blockRange: BlockRange, queryOptions?: Omit<AccountQueryParams, 'startBlock' | 'endBlock'>, requestConfig?: RequestConfig): Promise<InternalTransaction[] | import("axios").AxiosResponse<{
    status: "0" | "1";
    message: string;
    result: InternalTransaction[];
}>>;
declare function getTokenTransferEventsByAddress(address: string, queryOptions?: AccountQueryParams, requestConfig?: RequestConfig): Promise<TokenTransferEvent[] | import("axios").AxiosResponse<{
    status: "0" | "1";
    message: string;
    result: TokenTransferEvent[];
}>>;
declare function getTokenTransferEventsByContractAddress(contractAddress: string, queryOptions?: AccountQueryParams, requestConfig?: RequestConfig): Promise<TokenTransferEvent[] | import("axios").AxiosResponse<{
    status: "0" | "1";
    message: string;
    result: TokenTransferEvent[];
}>>;
declare function getTokenTransferEventsByAddressAndContractAddress(address: string, contractAddress: string, queryOptions?: AccountQueryParams, requestConfig?: RequestConfig): Promise<TokenTransferEvent[] | import("axios").AxiosResponse<{
    status: "0" | "1";
    message: string;
    result: TokenTransferEvent[];
}>>;
declare function getTransactions(address: string, queryOptions?: AccountQueryParams, requestConfig?: RequestConfig): Promise<Transaction[] | import("axios").AxiosResponse<{
    status: "0" | "1";
    message: string;
    result: Transaction[];
}>>;
declare const _default: {
    getBnbBalance: typeof getBnbBalance;
    getBnbBalanceForMultipleAddresses: typeof getBnbBalanceForMultipleAddresses;
    getInternalTransactionsByAddress: typeof getInternalTransactionsByAddress;
    getInternalTransactionsByHash: typeof getInternalTransactionsByHash;
    getInternalTransactionsByBlockRange: typeof getInternalTransactionsByBlockRange;
    getTokenTransferEventsByAddress: typeof getTokenTransferEventsByAddress;
    getTokenTransferEventsByContractAddress: typeof getTokenTransferEventsByContractAddress;
    getTokenTransferEventsByAddressAndContractAddress: typeof getTokenTransferEventsByAddressAndContractAddress;
    getTransactions: typeof getTransactions;
};
export default _default;
//# sourceMappingURL=account.d.ts.map