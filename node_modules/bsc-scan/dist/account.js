"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var query_1 = __importDefault(require("./query"));
function getBnbBalance(address, queryOptions, requestConfig) {
    return query_1.default(__assign(__assign({}, queryOptions), { address: address, module: 'account', action: 'balance', tag: 'latest' }), requestConfig);
}
function getBnbBalanceForMultipleAddresses(addresses, queryOptions, requestConfig) {
    return query_1.default(__assign(__assign({}, queryOptions), { address: addresses.join(','), module: 'account', action: 'balancemulti', tag: 'latest' }), requestConfig);
}
function getInternalTransactionsByAddress(address, queryOptions, requestConfig) {
    return query_1.default(__assign(__assign({}, queryOptions), { address: address, module: 'account', action: 'txlistinternal' }), requestConfig);
}
function getInternalTransactionsByHash(txhash, queryOptions, requestConfig) {
    return query_1.default(__assign(__assign({}, queryOptions), { txhash: txhash, module: 'account', action: 'txlistinternal' }), requestConfig);
}
function getInternalTransactionsByBlockRange(blockRange, queryOptions, requestConfig) {
    return query_1.default(__assign(__assign(__assign({}, queryOptions), blockRange), { module: 'account', action: 'txlistinternal' }), requestConfig);
}
function getTokenTransferEventsByAddress(address, queryOptions, requestConfig) {
    return query_1.default(__assign(__assign({}, queryOptions), { address: address, module: 'account', action: 'tokentx' }), requestConfig);
}
function getTokenTransferEventsByContractAddress(contractAddress, queryOptions, requestConfig) {
    return query_1.default(__assign(__assign({}, queryOptions), { contractAddress: contractAddress, module: 'account', action: 'tokentx' }), requestConfig);
}
function getTokenTransferEventsByAddressAndContractAddress(address, contractAddress, queryOptions, requestConfig) {
    return query_1.default(__assign(__assign({}, queryOptions), { address: address,
        contractAddress: contractAddress, module: 'account', action: 'tokentx' }), requestConfig);
}
function getTransactions(address, queryOptions, requestConfig) {
    return query_1.default(__assign(__assign({}, queryOptions), { address: address, module: 'account', action: 'txlist' }), requestConfig);
}
exports.default = {
    getBnbBalance: getBnbBalance,
    getBnbBalanceForMultipleAddresses: getBnbBalanceForMultipleAddresses,
    getInternalTransactionsByAddress: getInternalTransactionsByAddress,
    getInternalTransactionsByHash: getInternalTransactionsByHash,
    getInternalTransactionsByBlockRange: getInternalTransactionsByBlockRange,
    getTokenTransferEventsByAddress: getTokenTransferEventsByAddress,
    getTokenTransferEventsByContractAddress: getTokenTransferEventsByContractAddress,
    getTokenTransferEventsByAddressAndContractAddress: getTokenTransferEventsByAddressAndContractAddress,
    getTransactions: getTransactions,
};
//# sourceMappingURL=account.js.map